%{ 
/*
 * Copyright 2006 Christoph Bonitz (christoph.bonitz@gmail.com)
 *           2007 Adrian Prantl
 * see LICENSE in the root folder of this project
*/
using namespace std;
#include <string>
#include <vector>
#include <iostream> 
#include "PrologTerm.h"
#include "termparser.tab.h++"

int colno = 0;

void count() {
  for (int i = 0; yytext[i] != '\0'; i++)
    if (yytext[i] == '\n')
      colno = 0;
    else if (yytext[i] == '\t')
      colno += 8 - (colno % 8);
    else
      colno++;
}

%}
%option yylineno noyywrap

doublequoted \"([^\"\\]*(\\.[^\"\\]*)*)\"
singlechar \"\\[0-9][0-9][0-9]\\\"
quoted \'([^\'\\]*(\\.[^\'\\]*)*)\'
variable [A-Z][A-Za-z_]*
int \-?[0-9]+
atom [a-z][A-Za-z_0-9]*
operator [\-\+\*\/\<\=\>\:]+

%%

[ \t\n] { count(); }
{doublequoted} {
        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        yylval.strValue = new string(yytext);
	return(STRING);
        }

{singlechar} {
        count();
	yytext[5] = 0;
        yylval.intValue = (int)strtol(yytext+2, NULL, 10);
	return(INT);
        }

{quoted} {
        count();
        yytext++;
        *(yytext + yyleng - 2) = '\0';
        yylval.strValue = new string(yytext);
	return(STRING);
        }
{variable} { count(); yylval.strValue = new string(yytext); return(VARIABLE); }
{int}      { count(); yylval.intValue = atoi(yytext);       return(INT);      }
{atom}     { count(); yylval.strValue = new string(yytext); return(ATOM);     }
{operator} { count(); yylval.strValue = new string(yytext); return(OPERATOR); }
.          { count(); return(yytext[0]); }

%%
