Project: Vectorization
------------------------------------------------------------------------------------------

Author: Pei-Hung Lin
Contact: lin32@llnl.gov, phlin@cs.umn.edu

Date Created       : July 2012

------------------------------------------------------------------------------------------
Project Goal: 
This project will implement vectorization in ROSE

------------------------------------------------------------------------------------------
Design/Implementation:

1. Using source-to-source approach to generate vectorized code in the source code.
    a. Code transformation that improves code structure, and allow compiler to recoginze it.
    b. Generate SIMD intrinsic function calls to enforace the vector instruction.

2. Allow user to provide directive to identify the vectorizable loops.
3. Provide multiple-platform vectorization.  The translator generates unified code, and 
   the runtime library can map the functions to the intrinsic functions used on different 
   platform.

------------------------------------------------------------------------------------------
Instruction:
Command:
  vectorization -msse3 -lsimd source_code_name.c -I$(ROSE_BUILD_TREE)/include -L$(ROSE_BUILD_TREE)/lib

Options:
  -msse3 is for SSE 3
  -lsimd use the runtime library
  
Be sure to include the ROSE_SIMD.h in $(ROSE_BUILD_TREE)/include and link libsimd.a in $(ROSE_BUILD_TREE)/lib

------------------------------------------------------------------------------------------
Feasible capabilities:

Perform strip-mining for normal loop.
check if loop is innermost, and stride one structure.
Basic loop-level vectorization for most basic arithmetic operators.
Able to catch FMA (fused multiply-add instruction.) e.g. a = b * c + d;  ==> a = _SIMD_madd(b,c,d);
Able to handle multi-dimensional array in C.
Testing codes can be translated, and compiled by GNU C compiler with SSE 3 instructions.
(updated at Aug 16.)
------------------------------------------------------------------------------------------
TODO list:

1. Use Defuse analysis to take care of scalar statements in the vector loop.
2. Generate translation for most binaryOp (should be straight forward).
3. Generate translation for if statement in vector loop.  This has to follow Fortran's CVMGM instruction.
4. Generate translation for special mathematical functions, e.g. sin, cos, pow...
5. Create prologue and epiloge iterations if the loop iteratins isn't perfect.
6. Involve the data-dependence analysis in vectorization.
7. Subscript analysis.  Make sure the subscripts fulfill the SIMD requirement.
8. Alignment handling.  Except the __attribute__((aligned(x))), do we have better approach to force alignment?
9. Multi-platform:  need to test IBM platform using AltiVec instruction.  
   Supports for SSE4.2, AVX instructions, but this requires support from later version of GCC (4.5+).


Note: To allow Fortan code to use this framework, we have to finish the Fortran-to-C work.
 
